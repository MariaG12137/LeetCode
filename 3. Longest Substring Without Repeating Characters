/*Given a string s, find the length of the longest substring without repeating characters.

*/

var lengthOfLongestSubstring = function(s) {
    let sArray = s.split('');
    let max = 0;
    let set = new Set();
    let count = 1;
    
    for(let i=0; i<sArray.length;i++){
        
        set.add(sArray[i])
        for(let j=i+1; j<sArray.length;j++){
            if(!set.has(sArray[j])){
                set.add(sArray[j]);
                count++;
            }else{
                break
            }
        }
        max = Math.max(max,count);
        set.clear();
        count = 1;
    }
    return max
    
};
================================================================================================================================
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        Set<Character> set = new HashSet<>();
        int ans = 0, i = 0, j = 0;
        
        while (i < n && j < n) {
            // try to extend the range [i, j]
            if (!set.contains(s.charAt(j))){
                set.add(s.charAt(j++));
                ans = Math.max(ans, j - i);
            }
            else {
                set.remove(s.charAt(i++));
            }
        }
        return ans;
    }
}
