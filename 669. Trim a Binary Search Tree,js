/*
Given a binary search tree and the lowest and highest boundaries as L and R, 
trim the tree so that all its elements lies in [L, R] (R >= L). You might need to change
the root of the tree, so the result should return the new root of the trimmed binary search tree.
*/
//tree traversal: post order(BETTER)
var trimBST = function(root, L, R) {
    if (root == null) {
        return null;
    }
    
    root.left = trimBST(root.left, L, R);    
    root.right = trimBST(root.right, L, R);
    
    if (root.val < L) {
        root = root.right;
    } else if (root.val > R) {
        root = root.left;
    }
        
    return root;
};
==========================================================================================================
//second submission: pre-order(need more work)
var trimBST = function(root, L, R) {
    
    function recur(node){
        if(!node){
            return null;
        }
        if(node.val<L){
            return recur(node.right);
        }
        if(node.val>R){
            return recur(node.left);
        }
        
        node.left = recur(node.left,L,R);
        node.right = recur(node.right,L,R);
        
        return node;
    }
    return recur(root);
    
};
