/*Given two binary strings, return their sum (also a binary string).

The input strings are both non-empty and contains only characters 1 or 0.
*/
/*
Use recursion:
    -Set i, j to be the fist digit
    -result = []
    -Define function add(i, j):
        -Base case: when any one binary string run out of bound{add(i+1, j+1).concat(result)}
        -if (sum = i+j+(add(i+1,j+1))>1){result.concat(sum-1), then return 1} 
        -else{result.concat(sum), then return []}
*/
var addBinary = function(a, b) {
    let len = Math.max(a.length, b.length);
    let aLen = a.length;
    let bLen = b.length;
    
    for(let i=0; i<(len-aLen); i++){
        a = '0'.concat(a);
    }
    
    for(let i=0; i<(len-bLen); i++){
        b = '0'.concat(b);}
    
    let result = '';
    
    let sum = function(i,j){
        if(a[i]==null || b[j]== null){
            return 0;
        }else{
            let total = parseInt(a[i])+parseInt(b[j])+sum(i+1,j+1);
            result = parseInt(total%2)+result;
            return total>1 ?1:0;
        }
    }
    return sum(0,0)>0?'1'+result:result;
};
//iteration
var addBinary = function(a, b) {
    let len = Math.max(a.length, b.length);
    let aLen = a.length;
    let bLen = b.length;
    
    for(let i=0; i<(len-aLen); i++){
        a = '0'.concat(a);
    }
    
    for(let i=0; i<(len-bLen); i++){
        b = '0'.concat(b);}
    console.log(a,b)
    
    let result = '';
    let total = 0;

    for(let i=len-1; i>=0;i--){
        
        total = parseInt(a[i])+parseInt(b[i])+total;
        result = parseInt(total%2)+result;
        total = total>1?1:0 
    }
    return total==1?'1'+result:result


};
