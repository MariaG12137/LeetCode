/*
Given a 32-bit signed integer, reverse digits of an integer.
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: 
[âˆ’231,  231 âˆ’ 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
*/

var reverse = function(x) { 
    let limit = Math.pow(2, 31);
    if(x > -limit && x < limit){
        let abs = Math.abs(x).toString();
        let reverseNum = Number(abs.split('').reverse().join(''));
        let sign = (x >0)?1:-1;
        return (reverseNum > -limit && reverseNum < limit)? (reverseNum *sign):0;
    };
    return 0;
};
//Time complexity:O(n)
//Space complexity:O(1)??
=========================================================================================================
var reverse = function(x) {
    let result = parseInt(x.toString().split('').reverse().join(''));
    
    if(result>Math.pow(2,31)-1 || result<Math.pow(-2,31)-1){
        return 0
    }
    return x>0?result:-result
};
