/*
You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
*/
/*
Procedure:
How many ways can a number be added to using only 1s and 2s, when order maters?
1. from 0 to 1: 1 way - 1
2. from 0 to 2: 2 ways(1,1)(2) - 2
3. from 0 to 3
  --0 to 2 then 2 to 3: 2 ways(1,1,1)(2,1)- always equals previous result
  -0 to 1 then 1 to 3: 2 ways(1,1,1)(1,2) - only when last digit is 2
   - 1
  -3 ways
4. from 0 to 4:
  -from 0 to 3, then 3 to 4:(1,1,1,1)(1,2,1)(2,1,1)- always equals previous result
  -from 0 to 2, then 2 to 4: (1,1,1,1)(1,1,2)(2,1,1)(2,2) - only when last digit is 2
  
Therefore the series follows similar patterns as the faboracci number:
function Jump(n):
base case: 
  1. when n=0{return 0}
  2. when n=1{return 1}
  3. when n=2{return 2}
Or else:
  result = Jump(n-1)+jump(n-2)
*/
var climbStairs = function(n) {
    if(n==1){return 1;}
    if(n==2){return 2;}
    else{
        return climbStairs(n-1)+climbStairs(n-2)
        }
    };
  ====================================================================================================
  var climbStairs = function(n) {
    let result = [];
    result[0]=0;
    result[1]=1;
    result[2]=2;
    for(let i=3;i<=n;i++){
        result[i]=result[i-1]+result[i-2]
    }
    return result[n]
    
    };
