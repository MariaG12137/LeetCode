/*
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:
*/
/*
Recursive: use inorder traversal to get all nodes, then see if the result is a pendulum
Iterative:????
1) Create an empty stack S.
2) Initialize current node as root
3) Push the current node to S and set current = current->left until current is NULL
4) If current is NULL and stack is not empty then 
     a) Pop the top item from stack.
     b) Print the popped item, set current = popped_item->right 
     c) Go to step 3.
5) If current is NULL and stack is empty then we are done.

*/
var isSymmetric = function(root) {
    
    let isMirror = function(r1,r2){
        if(r1==null && r2==null){
            return true;
        }else if(r1==null || r2==null){
            return false;
        }
        
        return (r1.val == r2.val)&&
        isMirror(r1.left,r2.right)&&
        isMirror(r1.right,r2.left);
    }
    return isMirror(root,root);
}
//Iterative
var isSameTree = function(p, q) {
  if (!p && !q) {
    return true;
  } else if (!p || !q) {
    return false;
  }
  
  function stringIt (t) {
    let queue = [t];
    let s = '';
    while (queue.length) {
      let n = queue.shift(); //take out the first value
      if (n === null) {    //if null, write null
        s += n;
      } else {           //if not, write it's value
        s += n.val;
        queue.push(n.left); //then push in it's left and right childs to the end
        queue.push(n.right);
      }
    }
    return s;  //result is a string
  }
  return stringIt(p) === stringIt(q);
}
============================================================================================
//second submission
var isSymmetric = function(root) {
    function compare(nodeA,nodeB){
        if(!nodeA && !nodeB){
            return true
        }
        if(!nodeA || !nodeB){
            return false
        }
        if(nodeA.val !== nodeB.val){
            return false
        }
        return compare(nodeA.left,nodeB.right) && compare(nodeA.right, nodeB.left)
    }
    return compare(root,root)
};

