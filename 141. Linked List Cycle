/*
Given a linked list, determine if it has a cycle in it.

To represent a cycle in the given linked list, we use an integer 
pos which represents the position (0-indexed) in the linked list where 
tail connects to. If pos is -1, then there is no cycle in the linked list.
*/
//Use 2 pointers, one fast, one slow. Limit the (node.next == null)condition of the faster node.
//If list loops, fast and slow pointers will meet eventually

var hasCycle = function(head) {
    if(head == null || head.next == null){
        return false
    }else{
        let pt1 = head;
        let pt2 = head.next;
        while(pt2 != pt1){ //we know the two pointers are pointing at different nodes
            if(pt2 == null || pt2.next == null){
                return false; //See if the FASTER node run into null =>if faster node is OK, slower node is OK
            }else{
                pt1 = pt1.next;
                pt2 = pt2.next.next;
            }
        }
        return true;
}
}
=================================================================================================
var hasCycle = function(head) {
    if(!head || !head.next){
        return false
    }
    
    let slow = head;
    let fast = head.next;
    
    while(fast && fast.next){
        if(slow === fast){
            return true
        }
        slow = slow.next;
        fast = fast.next.next;
    }
    return false
}
